# region [Imports]

# *NORMAL Imports -->
# import argparse
# import datetime
# # import jinja2
# # import lzma
import os
# import re
# import shutil
import sys
# import time
# from collections import namedtuple
# from contextlib import contextmanager
# from natsort import natsorted
from pprint import *
# import pyperclip

# *GID Imports -->
import gidlogger as glog
from gidtools.gidconfig import Cfg, ConfigRental
from gidqtutils.gidqtstuff import (as_filedialog,
                                   buttongroup_factory,
                                   create_new_font,
                                   enable_widget_bool,
                                   fill_combo_from_db,
                                   make_icons,
                                   make_icons_stdpath,
                                   treewidgeter_simple)

from gidtools.gidfiles import (absolute_listdir,
                               appendwriteit,
                               cascade_rename,
                               clearit,
                               dir_change,
                               ext_splitter,
                               file_name_modifier,
                               file_name_time,
                               file_walker,
                               from_dict_to_file,
                               get_absolute_path,
                               get_pickled,
                               hash_to_solidcfg,
                               ishash_same,
                               limit_amount_of_files,
                               linereadit,
                               number_rename,
                               path_part_remove,
                               pathmaker,
                               pickleit,
                               readbin,
                               readit,
                               splitoff,
                               timenamemaker,
                               work_in,
                               writebin,
                               writeit)

from gidtools.gidstuff import RandomHSV, RandomRGB
from gidtools.gidtriumvirate import (GidSQLBuilder, GiSolidConfig, GiUserConfig, GiVariousConfig, give_std_repr)

# *QT Imports -->
from PyQt5 import QtWidgets
from PyQt5.QtCore import QSize, Qt
from PyQt5.QtGui import QBrush, QColor, QCursor, QIcon, QPixmap
from PyQt5.QtWidgets import (QButtonGroup, QDialog, QFileDialog, QHeaderView,
                             QListWidgetItem, QMenu, QMessageBox,
                             QTreeWidgetItem, QTreeWidgetItemIterator)

# *Local Imports -->
from {{ converted_file }} import {{ converted_class }}

# endregion [Imports]

__updated__ = '2020-08-29 08:29:46'

# region [Configs]

USER_CONFIG = ConfigRental.get_config(Cfg.User, cfg_folder='default')
SOLID_CFG = ConfigRental.get_config(Cfg.Solid, cfg_folder='default')

# endregion [Configs]

# region [Logging]

_log_file = glog.log_folderer('__main__')
log = glog.main_logger(_log_file, USER_CONFIG.get('general_settings', 'logging_level'))
log.info(glog.NEWRUN())
if USER_CONFIG.getboolean('general_settings', 'use_logging') is False:
    log.disable(log.CRITICAL)

# endregion [Logging]

# region [Constants]


# endregion [Constants]

# region [Global_Functions]


# endregion [Global_Functions]

# region [GUI_MainWindow]

class {{ new_class }}({{ converted_class }}):
    def __init__(self, mainwindow):
        super().setupUi(mainwindow)
        self.main_window = mainwindow
        self.ucfg = USER_CONFIG
        self.scfg = SOLID_CFG
        self.setup()
        self.general_actions()
        self.menu_actions()
        log.info(*glog.class_initiated(self.__class__))

# | Setups --------------------------------------------------------------------->
    def setup(self):
        self.general_setup()
        self.font_setup()
        self.style_setup()
        self.widgets_disabled_setup()
        self.mainwindow_setup()
        self.combos_setup()

    def mainwindow_setup(self):
        self.main_window.setWindowTitle(self.scfg.get('DEFAULT', 'project_name'))
        self.main_window.resize(self.ucfg.getint('main_window', 'main_window_width'), self.ucfg.getint('main_window', 'main_window_height'))

    def general_setup(self):
        pass

    def combos_setup(self):
        pass

    def font_setup(self):
        pass

    def style_setup(self):
        pass

    def widgets_disabled_setup(self):
        pass

# | Actions --------------------------------------------------------------------->
    def actions(self):
        self.general_actions()
        self.menu_actions()
        self.context_menu_actions()

    def general_actions(self):
        pass

    def menu_actions(self):
        pass

    def context_menu_actions(self):
        pass

# | Methods --------------------------------------------------------------------->
    {% for method in methods  %}
    def {{ method }}(self):
        pass
    {% endfor %}

# endregion [GUI_MainWindow]


# region [Main_Exec]
if __name__ == '__main__':
    try:
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = {{ new_class }}(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
    except:
        log.exception(sys.exc_info()[0])
        raise

# endregion [Main_Exec]
